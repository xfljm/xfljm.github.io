<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[object Object]</title>
    <url>/2020/2-SpringSecurity-%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83/</url>
    <content><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>在前面的学习中，Spring Security提供的安全机制：仅有一个用户，仅有一种角色。这种方式在实际开发中也明显不行。下面将按照两种方式创建多用户和多角色配置</p>
<h2 id="2-自定义验证"><a href="#2-自定义验证" class="headerlink" title="2. 自定义验证"></a>2. 自定义验证</h2><p>基础配置，在<code>SecurityConfig</code>中配置如下内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/api/admin/**"</span>).hasRole(<span class="string">"ADMIN"</span>) <span class="comment">//对"/admin"的请求判断是否有“ADMIN”权限</span></span><br><span class="line">                .antMatchers(<span class="string">"/api/user/**"</span>).hasRole(<span class="string">"USER"</span>) <span class="comment">//对"/user/**"下的请求判断是否有“USER”权限</span></span><br><span class="line">                .antMatchers(<span class="string">"/api/app/**"</span>).permitAll() <span class="comment">//对"/app/**"下的请求不拦截</span></span><br><span class="line">                .anyRequest().authenticated() <span class="comment">// 对所有请求都需要验证</span></span><br><span class="line">                .and()</span><br><span class="line">            .formLogin()</span><br><span class="line">                .successHandler(<span class="keyword">new</span> MyAuthenticationSuccessHandler()) <span class="comment">// 登录成功后的处理</span></span><br><span class="line">                .failureHandler(<span class="keyword">new</span> MyAuthenticationFailureHandler()) <span class="comment">// 登录失败后的处理</span></span><br><span class="line">                .permitAll(); <span class="comment">//登录页是不设置访问限制;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建三个Controller（分别为：AdminController、UserController和AppController），其中<code>AdminController</code>如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/admin"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello, admin"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他两个controller和其相似。</p>
<h3 id="2-1-基于内存的验证"><a href="#2-1-基于内存的验证" class="headerlink" title="2.1 基于内存的验证"></a>2.1 基于内存的验证</h3><p>这种方式相对简单，验证用户的数据固定在代码中，只需要实现<code>UserDetailService</code>即可。详细代码如下：</p>
<p><img src="https://raw.githubusercontent.com/xfljm/img/master/Img/20200229153508.png" alt></p>
<p>我们可以看到<code>UserDetailManager</code>下主要有两个子类，分别代表两种方式。</p>
<p>在<code>SecurityConfig</code>中配置如下内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    	<span class="comment">// ....   </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        InMemoryUserDetailsManager manager = <span class="keyword">new</span> InMemoryUserDetailsManager();</span><br><span class="line">        manager.createUser(User.withUsername(<span class="string">"user"</span>).password(<span class="string">"123"</span>).roles(<span class="string">"USER"</span>).build());</span><br><span class="line">        manager.createUser(User.withUsername(<span class="string">"admin"</span>).password(<span class="string">"123"</span>).roles(<span class="string">"USER"</span>,<span class="string">"ADMIN"</span>).build());</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面创建了两个用户：user和admin，分别具有不同的角色。</p>
<p>运行项目，通过上述配置的密码角色，自行验证。</p>
<h3 id="2-2-基于数据库的验证"><a href="#2-2-基于数据库的验证" class="headerlink" title="2.2 基于数据库的验证"></a>2.2 基于数据库的验证</h3><p>（1）由于使用数据库方式验证，所以必要的依赖是不可缺少的。在pom.xml中添加如下依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加Springboot支持mybatis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加mysql驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在前面的继承图中可以，使用数据库方式验证，可以通过创建<code>JdbcUserDetailManager</code>实例，但是这种方式有一定局限，创建的数据库模型必须是Spring Security默认提供的，因此还可以通过直接实现<code>UserDetailService</code>方式实现。</p>
<h4 id="2-2-1-基于Spring-Security默认提供的模型"><a href="#2-2-1-基于Spring-Security默认提供的模型" class="headerlink" title="2.2.1 基于Spring Security默认提供的模型"></a>2.2.1 基于Spring Security默认提供的模型</h4><p>（1）创建数据库中的表<code>User</code>和<code>Authority</code>，这两种表在：<code>/org/springframework/security/core/userdetails/jdbc/users.ddl</code>中提供了定义（注意修改下数据类型）：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> (</span><br><span class="line">  username <span class="built_in">VARCHAR</span> (<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">PASSWORD</span> <span class="built_in">VARCHAR</span> (<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  enabled <span class="built_in">BOOLEAN</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> authorities (</span><br><span class="line">  username <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  authority <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> fk_authorities_users <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (username) <span class="keyword">REFERENCES</span> <span class="keyword">users</span> (username)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> ix_auth_username</span><br><span class="line"><span class="keyword">ON</span> authorities (username, authority);</span><br></pre></td></tr></table></figure>

<p>在mysql中创建上面的表。</p>
<p>（2）修改<code>SecurityConfig</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">// 需要注入数据源</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource; </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    	<span class="comment">// ....   </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基于jdbc方式</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JdbcUserDetailsManager manager = <span class="keyword">new</span> JdbcUserDetailsManager();</span><br><span class="line">        manager.setDataSource(dataSource);  <span class="comment">// manager需要设置数据源</span></span><br><span class="line">        <span class="keyword">if</span> (!manager.userExists(<span class="string">"user"</span>))&#123; <span class="comment">// 由于username是主键，当数据库中存在这个名字时，重启服务会继续创建而报错，因而需要判断</span></span><br><span class="line">            manager.createUser(User.withUsername(<span class="string">"user"</span>).password(<span class="string">"123"</span>).roles(<span class="string">"USER"</span>).build());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!manager.userExists(<span class="string">"admin"</span>))&#123; <span class="comment">// 同上理</span></span><br><span class="line">            manager.createUser(User.withUsername(<span class="string">"admin"</span>).password(<span class="string">"123"</span>).roles(<span class="string">"USER"</span>,<span class="string">"ADMIN"</span>).build());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动服务，可以发现数据被填充进数据库中。当用户访问时，可以根据配置的数据登录访问。</p>
<p>上面的基于<code>JdbcUserDetailManager</code>和<code>InMemoryUserDetailManager</code>两种方式均可以在<code>WebSecurityConfigurer Adapter</code>中的另外一个<code>config</code>方法中配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基于jdbc方式</span></span><br><span class="line"><span class="comment">/*@Bean</span></span><br><span class="line"><span class="comment">public UserDetailsService userDetailsService()&#123;</span></span><br><span class="line"><span class="comment">	JdbcUserDetailsManager manager = new JdbcUserDetailsManager();</span></span><br><span class="line"><span class="comment">    manager.setDataSource(dataSource);  // manager需要设置数据源</span></span><br><span class="line"><span class="comment">    if (!manager.userExists("user"))&#123; // 由于username是主键，当数据库中存在这个名字时，重启服务会继续创建而报错，因而需要判断</span></span><br><span class="line"><span class="comment">    	manager.createUser(User.withUsername("user").password("123").roles("USER").build());</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    if (!manager.userExists("admin"))&#123; // 同上理</span></span><br><span class="line"><span class="comment">            manager.createUser(User.withUsername("admin").password("123").roles("USER","ADMIN").build());</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return manager;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">	auth.jdbcAuthentication()</span><br><span class="line">    	.dataSource(dataSource)</span><br><span class="line">        .withUser(<span class="string">"user"</span>).password(<span class="string">"123"</span>).roles(<span class="string">"USER"</span>)</span><br><span class="line">        .and()</span><br><span class="line">        .withUser(<span class="string">"admin"</span>).password(<span class="string">"123"</span>).roles(<span class="string">"USER"</span>,<span class="string">"ADMIN"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样也可以实现上面功能（但是存在问题就是无法和上面判断使用存在同名的user）</p>
<h4 id="2-2-2-基于自定义的数据库模型（重点）"><a href="#2-2-2-基于自定义的数据库模型（重点）" class="headerlink" title="2.2.2 基于自定义的数据库模型（重点）"></a>2.2.2 基于自定义的数据库模型（重点）</h4><p>上面存在的问题在于：固定了数据库表的结构，这在实际开发中明显不行，因此需要自己定义。在前面学习两种基本方式时，使用了基于内存的方式和基于数据库的方式，同样还是将上面的那个继承关系放到下面：</p>
<p><img src="https://raw.githubusercontent.com/xfljm/img/master/Img/20200229153508.png" alt></p>
<p>可以发现一个特点：就是两者都实现<code>UserDetailsService</code>和<code>UserDetailsManager</code>接口，不妨先看看这两个接口。</p>
<p>首先看看<code>UserDetailsService</code>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 根据用户名找到用户。 在实际的实现中，搜索可能区分大小写，或者不区分大小写，具体取决于实现实例的配置方式。 在这种情况下，返回的&lt;code&gt; UserDetails &lt;/ code&gt;对象的用户名可能与实际请求的用户名不同。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通常在这里查找到数据库中的用户，可以参考前面两个实现类的操作，这里不详细谈论。</p>
<p>在<code>UserDetailsManager</code>接口中，主要定义了一些增删改查的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDetailsManager</span> <span class="keyword">extends</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Create a new user with the supplied details.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">createUser</span><span class="params">(UserDetails user)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Update the specified user.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(UserDetails user)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Remove the user with the given login name from the system.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(String username)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Modify the current user's password. This should change the user's password in the</span></span><br><span class="line"><span class="comment">	 * persistent user repository (datbase, LDAP etc).</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> oldPassword current password (for re-authentication if required)</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> newPassword the password to change to</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">changePassword</span><span class="params">(String oldPassword, String newPassword)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Check if a user with the supplied login name exists in the system.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">userExists</span><span class="params">(String username)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于自己使用Jpa或者mybatis查询更加灵活，所以不需要上面定义的接口。</p>
<p>综上：使用自定义的方法一定需要实现<code>UserDetailsService</code>接口。</p>
<p>（1）创建一个数据库表,并插入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`users`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">VARCHAR</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`enable`</span> <span class="built_in">TINYINT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'1'</span> <span class="keyword">COMMENT</span> <span class="string">'用户是否可用'</span>,</span><br><span class="line">  <span class="string">`roles`</span> <span class="built_in">TEXT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COMMENT</span> <span class="string">'用户角色，多个角色之间用逗号隔开'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`username`</span> (<span class="string">`username`</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`users`</span>(<span class="string">`username`</span>, <span class="string">`password`</span>, <span class="string">`roles`</span>) <span class="keyword">VALUES</span>(<span class="string">"admin"</span>, <span class="string">"123"</span>, <span class="string">"ROLE_ADMIN,ROLE_USER"</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`users`</span>(<span class="string">`username`</span>, <span class="string">`password`</span>, <span class="string">`roles`</span>) <span class="keyword">VALUES</span>(<span class="string">"user"</span>, <span class="string">"123"</span>, <span class="string">"ROLE_USER"</span>);</span><br></pre></td></tr></table></figure>

<p>需要删除之前的表，或者另外命令。</p>
<p>（2）创建<code>MyUserDetailsService</code>类实现<code>UserDetailsService</code>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUserDetailsService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyPasswordEncoder myPasswordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(MyUserDetailsService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">        LOGGER.info(<span class="string">"前台获取到的用户名为："</span>+username);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从数据库中尝试获取该用户</span></span><br><span class="line">        User user = userMapper.findByUsername(username);</span><br><span class="line">        <span class="comment">// 用户不存在，抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"用户不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置密码</span></span><br><span class="line">        String password = myPasswordEncoder.encode(user.getPassword());</span><br><span class="line">        LOGGER.info(<span class="string">"数据库中的密码为："</span>+password);</span><br><span class="line">        user.setPassword(password);</span><br><span class="line">        <span class="comment">//user</span></span><br><span class="line">        <span class="comment">// 将数据库形式的roles解析为UserDetails的权限集</span></span><br><span class="line">        <span class="comment">// AuthorityUtils.commaSeparatedStringToAuthorityList是Spring Security</span></span><br><span class="line">        <span class="comment">//提供的用于将逗号隔开的权限集字符串切割成可用权限对象列表的方法</span></span><br><span class="line">        <span class="comment">// 当然也可以自己实现，如用分号来隔开等，参考generateAuthorities</span></span><br><span class="line">        user.setAuthorities(AuthorityUtils.commaSeparatedStringToAuthorityList(user.getRoles()));</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面返回的User类是自己定义的。这里的User可以使用Spring Security带的<code>User</code>类，也可以使用自定义的<code>User</code>类，但是需要注意自定义的<code>User</code>类需要继承<code>UserDetails</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String roles;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> enable;</span><br><span class="line">    <span class="keyword">private</span> List&lt;GrantedAuthority&gt; authorities;  <span class="comment">// 自定义变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 目前用不到，暂时返回true，否则将会报错</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 目前用不到，暂时返回true，否则将会报错</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 目前用不到，暂时返回true，否则将会报错</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.enable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoles</span><span class="params">(String roles)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roles = roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> enable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnable</span><span class="params">(<span class="keyword">boolean</span> enable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.enable = enable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthorities</span><span class="params">(List&lt;GrantedAuthority&gt; authorities)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authorities = authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外mappr为<code>UserMapper</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from users where username= #&#123;username&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">findByUsername</span><span class="params">(@Param(<span class="string">"username"</span>)</span> String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在启动类上需要添加包扫描</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.xfcy.dao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前面添加了一个密码操作，因为实际开发中不可能是明文密码，通常是经过加密处理，并且还存在加密方式为普通的加密的基础上增加某些字符串等等。</p>
<p>（3）创建的<code>MyPasswordEncoder</code>类为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPasswordEncoder</span> <span class="keyword">implements</span> <span class="title">PasswordEncoder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(MyPasswordEncoder<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编码原始密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rawPassword 用户输入的密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encode</span><span class="params">(CharSequence rawPassword)</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"加密时待加密的密码："</span> + rawPassword.toString());</span><br><span class="line">        <span class="keyword">return</span> rawPassword.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较用户输入的密码和数据库存储的密码是否一致</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rawPassword 用户输入的密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encodedPassword 存储的密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(CharSequence rawPassword, String encodedPassword)</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"待校验的密码："</span>+rawPassword.toString());</span><br><span class="line">        LOGGER.info(<span class="string">"存储的密码："</span>+encodedPassword);</span><br><span class="line">        <span class="keyword">return</span> rawPassword.equals(encodedPassword);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>PasswordEncoder</code>接口提供了两个方法，由于这里是不需要加密，所以直接返回即可。</p>
<p>（4）查看一下配置类，需要注释掉之前基于内存和普通数据库模型的方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Autowired</span></span><br><span class="line">    <span class="comment">//private DataSource dataSource;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/api/admin/**"</span>).hasRole(<span class="string">"ADMIN"</span>) <span class="comment">//对"/admin"的请求判断是否有“ADMIN”权限</span></span><br><span class="line">                .antMatchers(<span class="string">"/api/user/**"</span>).hasRole(<span class="string">"USER"</span>) <span class="comment">//对"/user/**"下的请求判断是否有“USER”权限</span></span><br><span class="line">                .antMatchers(<span class="string">"/api/app/**"</span>).permitAll() <span class="comment">//对"/app/**"下的请求判断是否有“APP”权限</span></span><br><span class="line">                .anyRequest().authenticated() <span class="comment">// 对所有请求都需要验证</span></span><br><span class="line">                .and()</span><br><span class="line">            .formLogin()</span><br><span class="line">                .successHandler(<span class="keyword">new</span> MyAuthenticationSuccessHandler()) <span class="comment">// 登录成功后的处理</span></span><br><span class="line">                .failureHandler(<span class="keyword">new</span> MyAuthenticationFailureHandler()) <span class="comment">// 登录失败后的处理</span></span><br><span class="line">                .permitAll(); <span class="comment">//登录页是不设置访问限制;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 其他被注释掉</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="https://raw.githubusercontent.com/xfljm/img/master/Img/20200229201758.png" alt></p>
<h2 id="3-小结"><a href="#3-小结" class="headerlink" title="3. 小结"></a>3. 小结</h2><p>以上便是基于自定义验证的全部内容。其中重点内容便是自定义数据库模型方式。后面将通过源码进行分析</p>
<p>参考资料：</p>
<ul>
<li>Spring Security实战</li>
</ul>
]]></content>
      <categories>
        <category>SpringSecurity</category>
      </categories>
      <tags>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>[object Object]</title>
    <url>/2020/1-SpringSecurity-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>在本节，我们主要学习一下Spring Security的基础知识。</p>
<h2 id="2-基础配置"><a href="#2-基础配置" class="headerlink" title="2. 基础配置"></a>2. 基础配置</h2><p>（1）配置maven</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- springboot对于web和test依赖支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- springboot对于security依赖支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="3-基本验证"><a href="#3-基本验证" class="headerlink" title="3. 基本验证"></a>3. 基本验证</h2><p>前期配置：</p>
<p>（1）创建一个启动器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）创建一个controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello, user"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-1-基于弹出框验证"><a href="#3-1-基于弹出框验证" class="headerlink" title="3.1 基于弹出框验证"></a>3.1 基于弹出框验证</h3><p>在SpringSecurity中提供了两种验证方式：基于弹出框验证和基于表单验证。在Spring5后，默认提供的方式为基于表单的验证。</p>
<p>在application.yml中配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">basic:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 默认是关闭的，另外在SpringBoot2.0后这个配置不推荐使用</span></span><br></pre></td></tr></table></figure>

<p>启动项目，得到随机密码为：</p>
<p><img src="https://raw.githubusercontent.com/xfljm/img/master/Img/20200229115919.png" alt></p>
<p>访问项目<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a></p>
<img src="https://raw.githubusercontent.com/xfljm/img/master/Img/20200229133000.png" style="zoom:150%;">



<h3 id="3-2-基于表单的验证"><a href="#3-2-基于表单的验证" class="headerlink" title="3.2 基于表单的验证"></a>3.2 基于表单的验证</h3><h4 id="3-2-1-使用默认账号和动态密码"><a href="#3-2-1-使用默认账号和动态密码" class="headerlink" title="3.2.1 使用默认账号和动态密码"></a>3.2.1 使用默认账号和动态密码</h4><p>（1）创建一个启动器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）创建一个controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello, user"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当启动项目时，得到一个随机密码</p>
<p><img src="https://raw.githubusercontent.com/xfljm/img/master/Img/20200229115919.png" alt></p>
<p>访问如下<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a></p>
<img src="https://raw.githubusercontent.com/xfljm/img/master/Img/20200227152932.png" style="zoom:150%;">

<p>其中用户名为默认值user，密码即为上面动态生成的密码。</p>
<h4 id="3-2-2-使用自定义账号密码"><a href="#3-2-2-使用自定义账号密码" class="headerlink" title="3.2.2 使用自定义账号密码"></a>3.2.2 使用自定义账号密码</h4><p>在application.yml中配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>

<p>当使用上述账号和密码便可以完成登录。</p>
<h2 id="4-自定义登录页"><a href="#4-自定义登录页" class="headerlink" title="4. 自定义登录页"></a>4. 自定义登录页</h2><p>前面使用的都是security自带的登录页。但是在开发中这种方式往往是不符合要求的，需要使用自己的登录页面。</p>
<p>方法：</p>
<p>（1）创建一个配置类实现<code>WebSecurityConfigurerAdapter</code>类</p>
<p>（2）重写<code>configure</code>方法</p>
<p>首先，了解下<code>WebSecurityConfigurerAdapter</code>类</p>
<h3 id="4-1-使用自定义登录页"><a href="#4-1-使用自定义登录页" class="headerlink" title="4.1 使用自定义登录页"></a>4.1 使用自定义登录页</h3><p>创建一个<code>SecurityConfig</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated() <span class="comment">//对任何请求都认证</span></span><br><span class="line">                .and()</span><br><span class="line">            .formLogin()</span><br><span class="line">                .loginPage(<span class="string">"/myLogin.html"</span>) <span class="comment">//使用表单登录，其中登录页是自定义页面</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">"/login"</span>) <span class="comment">// 处理表单提交的请求，这个必须和action的地址一致</span></span><br><span class="line">                .permitAll() <span class="comment">//登录页是不设置访问限制</span></span><br><span class="line">                .and()</span><br><span class="line">            .csrf().disable(); <span class="comment">// 关闭跨域访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后添加一个自定义的登录界面，其中登录界面的<code>action</code>为<code>/login</code></p>
<p>重启项目，并运行</p>
<p><img src="https://raw.githubusercontent.com/xfljm/img/master/Img/20200229133216.png" alt></p>
<h2 id="5-自定义成功和失败处理"><a href="#5-自定义成功和失败处理" class="headerlink" title="5. 自定义成功和失败处理"></a>5. 自定义成功和失败处理</h2><p>由于前面挡用户认证成功后，便有服务器处理请求，然后返回给浏览器。但是在前后端分离的场景中，应该的流程为：用户认证成功后，将结果返回给浏览器，然后浏览器决定是否再向服务器请求用户需要的地址内容。</p>
<p>修改在<code>securityConfig</code>中配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated() <span class="comment">//对任何请求都认证</span></span><br><span class="line">                .and()</span><br><span class="line">            .formLogin()</span><br><span class="line">                .loginPage(<span class="string">"/myLogin.html"</span>) <span class="comment">//使用表单登录，其中登录页是自定义页面</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">"/login"</span>) <span class="comment">// 设置表单提交的请求，这个必须和action的地址一致</span></span><br><span class="line">                .successHandler(<span class="keyword">new</span> MyAuthenticationSuccessHandler()) <span class="comment">// 登录成功后的处理</span></span><br><span class="line">                .failureHandler(<span class="keyword">new</span> MyAuthenticationFailureHandler()) <span class="comment">// 登录失败后的处理</span></span><br><span class="line">                .permitAll() <span class="comment">//登录页是不设置访问限制</span></span><br><span class="line">                .and()</span><br><span class="line">            .csrf().disable(); <span class="comment">// 关闭跨域访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中定义的<code>MyAuthenticationSuccessHandler</code>和<code>MyAuthenticationFailureHandler</code>类为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticationSuccessHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationSuccessHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户成功登录后的响应</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        httpServletResponse.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">        PrintWriter writer = httpServletResponse.getWriter();</span><br><span class="line">        <span class="comment">// 响应一个json串，让浏览器决定后续处理</span></span><br><span class="line">        writer.write(<span class="string">"&#123;\"error_code\":\"0\",\"message\":\"认证成功\"&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticationFailureHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationFailureHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录失败后的处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">        PrintWriter writer = response.getWriter();</span><br><span class="line">        <span class="comment">// 响应一个json串，让浏览器决定后续处理</span></span><br><span class="line">        writer.write(<span class="string">"&#123;\"error_code\":\"1\",\"message\":\"认证失败\"&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启项目，等到运行结果：</p>
<p><img src="https://raw.githubusercontent.com/xfljm/img/master/Img/20200229133618.png" alt></p>
<h2 id="6-小结"><a href="#6-小结" class="headerlink" title="6. 小结"></a>6. 小结</h2><p>以上便是SpringSecurity的基础内容，当然实际开发中更多的是使用OAuth2.相关内容后续再学习。</p>
<p>参考资料</p>
<ul>
<li>《Spring Security实战》</li>
</ul>
]]></content>
      <categories>
        <category>SpringSecurity</category>
      </categories>
      <tags>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>[object Object]</title>
    <url>/2020/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>默认文件</tag>
      </tags>
  </entry>
</search>
