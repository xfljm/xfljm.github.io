<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringSecurity-2-SpringSecurity-认证与授权</title>
    <url>/2020/SpringSecurity-2-SpringSecurity-%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83/</url>
    <content><![CDATA[<p>–</p>
<p>tag: </p>
<p>–</p>
<h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><p><img src="https://raw.githubusercontent.com/xfljm/img/master/Img/20200227152932.png" alt></p>
]]></content>
  </entry>
  <entry>
    <title>[object Object]</title>
    <url>/2020/SpringSecurity-1-SpringSecurity-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="1-基础配置"><a href="#1-基础配置" class="headerlink" title="1. 基础配置"></a>1. 基础配置</h2><p>（1）配置maven</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- springboot对于web和test依赖支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- springboot对于security依赖支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="2-基本验证"><a href="#2-基本验证" class="headerlink" title="2. 基本验证"></a>2. 基本验证</h2><p>前期配置：</p>
<p>（1）创建一个启动器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）创建一个controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello, user"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-1-基于弹出框验证"><a href="#2-1-基于弹出框验证" class="headerlink" title="2.1 基于弹出框验证"></a>2.1 基于弹出框验证</h3><p>在SpringSecurity中提供了两种验证方式：基于弹出框验证和基于表单验证。在Spring5后，默认提供的方式为基于表单的验证。</p>
<p>在application.yml中配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">basic:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 默认是关闭的，另外在SpringBoot2.0后这个配置不推荐使用</span></span><br></pre></td></tr></table></figure>

<p>启动项目，得到随机密码为：</p>
<p><img src="https://raw.githubusercontent.com/xfljm/img/master/Img/20200229115919.png" alt></p>
<p>访问项目<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a></p>
<img src="https://raw.githubusercontent.com/xfljm/img/master/Img/20200229133000.png" style="zoom:150%;">



<h3 id="2-2-基于表单的验证"><a href="#2-2-基于表单的验证" class="headerlink" title="2.2 基于表单的验证"></a>2.2 基于表单的验证</h3><h4 id="2-2-1-使用默认账号和动态密码"><a href="#2-2-1-使用默认账号和动态密码" class="headerlink" title="2.2.1 使用默认账号和动态密码"></a>2.2.1 使用默认账号和动态密码</h4><p>（1）创建一个启动器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）创建一个controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello, user"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当启动项目时，得到一个随机密码</p>
<p><img src="https://raw.githubusercontent.com/xfljm/img/master/Img/20200229115919.png" alt></p>
<p>访问如下<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a></p>
<img src="https://raw.githubusercontent.com/xfljm/img/master/Img/20200227152932.png" style="zoom:150%;">

<p>其中用户名为默认值user，密码即为上面动态生成的密码。</p>
<h4 id="2-2-2-使用自定义账号密码"><a href="#2-2-2-使用自定义账号密码" class="headerlink" title="2.2.2 使用自定义账号密码"></a>2.2.2 使用自定义账号密码</h4><p>在application.yml中配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>

<p>当使用上述账号和密码便可以完成登录。</p>
<h2 id="3-自定义登录页"><a href="#3-自定义登录页" class="headerlink" title="3. 自定义登录页"></a>3. 自定义登录页</h2><p>前面使用的都是security自带的登录页。但是在开发中这种方式往往是不符合要求的，需要使用自己的登录页面。</p>
<p>方法：</p>
<p>（1）创建一个配置类实现<code>WebSecurityConfigurerAdapter</code>类</p>
<p>（2）重写<code>configure</code>方法</p>
<p>首先，了解下<code>WebSecurityConfigurerAdapter</code>类</p>
<h3 id="3-1-使用自定义登录页"><a href="#3-1-使用自定义登录页" class="headerlink" title="3.1 使用自定义登录页"></a>3.1 使用自定义登录页</h3><p>创建一个<code>SecurityConfig</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated() <span class="comment">//对任何请求都认证</span></span><br><span class="line">                .and()</span><br><span class="line">            .formLogin()</span><br><span class="line">                .loginPage(<span class="string">"/myLogin.html"</span>) <span class="comment">//使用表单登录，其中登录页是自定义页面</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">"/login"</span>) <span class="comment">// 处理表单提交的请求，这个必须和action的地址一致</span></span><br><span class="line">                .permitAll() <span class="comment">//登录页是不设置访问限制</span></span><br><span class="line">                .and()</span><br><span class="line">            .csrf().disable(); <span class="comment">// 关闭跨域访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后添加一个自定义的登录界面，其中登录界面的<code>action</code>为<code>/login</code></p>
<p>重启项目，并运行</p>
<p><img src="https://raw.githubusercontent.com/xfljm/img/master/Img/20200229133216.png" alt></p>
<h2 id="4-自定义成功和失败处理"><a href="#4-自定义成功和失败处理" class="headerlink" title="4. 自定义成功和失败处理"></a>4. 自定义成功和失败处理</h2><p>由于前面挡用户认证成功后，便有服务器处理请求，然后返回给浏览器。但是在前后端分离的场景中，应该的流程为：用户认证成功后，将结果返回给浏览器，然后浏览器决定是否再向服务器请求用户需要的地址内容。</p>
<p>修改在<code>securityConfig</code>中配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated() <span class="comment">//对任何请求都认证</span></span><br><span class="line">                .and()</span><br><span class="line">            .formLogin()</span><br><span class="line">                .loginPage(<span class="string">"/myLogin.html"</span>) <span class="comment">//使用表单登录，其中登录页是自定义页面</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">"/login"</span>) <span class="comment">// 设置表单提交的请求，这个必须和action的地址一致</span></span><br><span class="line">                .successHandler(<span class="keyword">new</span> MyAuthenticationSuccessHandler()) <span class="comment">// 登录成功后的处理</span></span><br><span class="line">                .failureHandler(<span class="keyword">new</span> MyAuthenticationFailureHandler()) <span class="comment">// 登录失败后的处理</span></span><br><span class="line">                .permitAll() <span class="comment">//登录页是不设置访问限制</span></span><br><span class="line">                .and()</span><br><span class="line">            .csrf().disable(); <span class="comment">// 关闭跨域访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中定义的<code>MyAuthenticationSuccessHandler</code>和<code>MyAuthenticationFailureHandler</code>类为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticationSuccessHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationSuccessHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户成功登录后的响应</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        httpServletResponse.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">        PrintWriter writer = httpServletResponse.getWriter();</span><br><span class="line">        <span class="comment">// 响应一个json串，让浏览器决定后续处理</span></span><br><span class="line">        writer.write(<span class="string">"&#123;\"error_code\":\"0\",\"message\":\"认证成功\"&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticationFailureHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationFailureHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录失败后的处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">        PrintWriter writer = response.getWriter();</span><br><span class="line">        <span class="comment">// 响应一个json串，让浏览器决定后续处理</span></span><br><span class="line">        writer.write(<span class="string">"&#123;\"error_code\":\"1\",\"message\":\"认证失败\"&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启项目，等到运行结果：</p>
<p><img src="https://raw.githubusercontent.com/xfljm/img/master/Img/20200229133618.png" alt></p>
<h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><p>以上便是SpringSecurity的基础内容，当然实际开发中更多的是使用OAuth2.相关内容后续再学习。</p>
<p>参考资料</p>
<ul>
<li>《Spring Security实战》</li>
</ul>
]]></content>
      <categories>
        <category>SpringSecurity</category>
      </categories>
      <tags>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>[object Object]</title>
    <url>/2020/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>默认文件</tag>
      </tags>
  </entry>
</search>
